#include <stdio.h> 
#include <stdlib.h> 
#include <string.h> 
#include <sys/stat.h> 
#include <time.h> 
#include <unistd.h> 
#include <dirent.h>
#include <dirent.h> 
#include <errno.h> 
#include <fcntl.h> 
#include <utime.h> 
#define MAX_FILENAME 512     
#define MAX_CONTENT 2048     
#define MAX_COMMAND 1024    
#define PASSWORD "admin123"  
#define LOG_FILE "file_ops.log"
// Function prototypes 
void show_menu(); 
void authenticate(); 
void log_operation(const char* operation, const char* filename); 
void list_files(); 
void create_file(); 
void delete_file(); 
void rename_file(); 
void edit_file(); 
void search_file(); 
void view_file(); 
void sort_file(); 
void copy_file(); 
void move_file(); 
void append_to_file(); 
void check_file_size(); 
void check_last_modified(); 
void clear_file(); 
void encrypt_file(); 
void decrypt_file(); 
void compress_file(); 
void decompress_file(); 
void change_permissions(); 
void backup_file(); 
void search_content();
int main() { 
authenticate(); 
int choice; 
while (1) { 
show_menu(); 
printf("Enter your choice: "); 
if (scanf("%d", &choice) != 1) { 
printf("Invalid input! Please enter a number.\n"); 
while (getchar() != '\n'); // Clear input buffer 
continue; 
} 
getchar();  
switch (choice) { 
case 1: list_files(); break; 
case 2: create_file(); break; 
case 3: delete_file(); break; 
case 4: rename_file(); break; 
case 5: edit_file(); break; 
case 6: search_file(); break; 
case 7: view_file(); break; 
case 8: sort_file(); break; 
case 9: copy_file(); break; 
case 10: move_file(); break; 
case 11: append_to_file(); break; 
case 12: check_file_size(); break; 
case 13: check_last_modified(); break; 
case 14: clear_file(); break; 
case 15: encrypt_file(); break; 
case 16: decrypt_file(); break; 
case 17: compress_file(); break; 
case 18: decompress_file(); break; 
case 19: change_permissions(); break; 
case 20: backup_file(); break; 
            case 21: search_content(); break; 
            case 0: printf("Exiting program.\n"); exit(0); 
            default: printf("Invalid choice, please try again.\n"); 
        } 
    } 
    return 0; 
}
void authenticate() { 
    char input_password[50]; 
    int attempts = 3; 
    while (attempts > 0) { 
        printf("Enter password (%d attempts remaining): ", attempts); 
        fgets(input_password, sizeof(input_password), stdin); 
        input_password[strcspn(input_password, "\n")] = 0; 
        if (strcmp(input_password, PASSWORD) == 0) { 
            printf("Access Granted!\n"); 
            return; 
        } 
        printf("Incorrect password!\n"); 
        attempts--; 
    } 
    printf("Access Denied! Too many failed attempts.\n"); 
    exit(1); 
} 
 
void log_operation(const char* operation, const char* filename) { 
    FILE* log = fopen(LOG_FILE, "a"); 
    if (log) { 
        time_t now; 
        time(&now); 
        fprintf(log, "[%s] %s: %s\n", ctime(&now), operation, filename); 
        fclose(log); 
    } 
}
